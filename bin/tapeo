#!/usr/bin/env node

//// MODULES //////////////////////////////////////////////////////////////////

var resolveModule = require('resolve').sync;
var resolvePath = require('path').resolve;
var parseOpts = require('minimist');
var glob = require('glob');
var fs = require('fs');

//// CONFIGURATION ////////////////////////////////////////////////////////////

var opts = parseOpts(process.argv.slice(2), {
        alias: { r: 'require', n: 'selectedTest' },
        string: 'require',
        boolean: 'n',
        default: { r: [], n: false }
    });

if (opts.selectedTest === true) {
    exitWithError("-n option requires a test number (e.g. -n42)");
}

var cwd = process.cwd();

if (typeof opts.require === 'string') {
    opts.require = [opts.require];
}

opts.require.forEach(function(module) {
    if (module) {
      /* This check ensures we ignore `-r ""`, trailing `-r`, or
       * other silly things the user might (inadvertently) be doing. */
      require(resolveModule(module, { basedir: cwd }));
    }
});

//// STATE ////////////////////////////////////////////////////////////////////

var testNumber = 0; // number of test currently running 

//// INSTALLATION /////////////////////////////////////////////////////////////

var tapePath;
var tape;
try {
    tapePath = "tape";
    tape = require(resolveModule(tapePath, { basedir: cwd }));
    if (typeof tape.onFilter === 'undefined')
        exitWithError("the installed tape module does not support tapeo");
    try {
        require(resolveModule("tapeo", { basedir: cwd }));
        exitWithError(
                "tape and tapeo can't both be installed in the same module");
    }
    catch(err) {
        // desired result; ignore
    }
}
catch(err) {
    try {
        tapePath = "tapeo";
        tape = require(resolveModule(tapePath, { basedir: cwd }));
    }
    catch(err) {
        try {
            fs.statSync(resolvePath(cwd, "../bin/tapeo"));
        }
        catch(err) {
            exitWithError("can't find tape or tapeo module");
        }
        tapePath = "..";
        tape = require(tapePath); // assume testing tapeo module itself
    }
}

tape.onFilter(function (testName, skipping, skipIt) {
    ++ testNumber;
    if (opts.selectedTest !== false) {
        if (testNumber !== opts.selectedTest)
            return null;
        else if (skipping)
            exitWithError("test "+ opts.selectedTest +" is being skipped");
    }
    else if (skipping)
        return null;
    return '['+ testNumber +'] '+ testName;
});

tape.onFinish(function () {
    if (opts.selectedTest !== false) {
        if (opts.selectedTest === 0 || opts.selectedTest > testNumber) {
            exitWithError("test "+ opts.selectedTest +" not found");
        }
    }
});

// hack to clarify meaning of total count
var resultsPath = tapePath +"/lib/results.js";
var Results = require(resolveModule(resultsPath, { basedir: cwd }))
Results.prototype.close = function () {
    var self = this;
    if (self.closed) self._stream.emit('error', new Error('ALREADY CLOSED'));
    self.closed = true;
    var write = function (s) { self._stream.queue(s) };
    
    write('\n1..' + self.count + '\n');
    write('# assertions ' + self.count + '\n');
    write('# pass  ' + self.pass + '\n');
    if (self.fail) write('# fail  ' + self.fail + '\n')
    else write('\n# ok\n')

    self._stream.queue(null);
};

//// RUN TESTS ////////////////////////////////////////////////////////////////

opts._.forEach(function (arg) {
    glob(arg, function (err, files) {
        files.forEach(function (file) {
            require(resolvePath(cwd, file));
        });
    });
});

//// SUPPORT FUNCTIONS ////////////////////////////////////////////////////////

function exitWithError(message) {
    console.log("*** %s ***\n", message);
    process.exit(1);
}

// vim: ft=javascript
