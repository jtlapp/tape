#!/usr/bin/env node

//// MODULES //////////////////////////////////////////////////////////////////

var resolveModule = require('resolve').sync;
var resolvePath = require('path').resolve;
var parseOpts = require('minimist');
var glob = require('glob');
var fs = require('fs');

//// CONFIGURATION ////////////////////////////////////////////////////////////

var opts = parseOpts(process.argv.slice(2), {
        alias: { r: 'require', n: 'selectedTest', s: 'maxFails', h: 'help' },
        string: 'require',
        boolean: [ 'n', 's', 'h' ],
        default: { r: [], n: false, s: false, h: false }
    });

if (opts.help) {
    console.log("tapeo [options] [files]\n");
    console.log("options:");
    console.log("  -nN : run only test number N");
    console.log("  -s  : stop run after 1st test with failures");
    console.log("  -sN : stop run after Nth test with failures");
    console.log("  -h  : this help information\n");
    process.exit(0);
}

if (opts.selectedTest === true) {
    exitWithError("-n option requires a test number (e.g. -n42)");
}

if (opts.maxFails === 0)
    exitWithError("-s option requires a number > 0");
if (opts.maxFails === true)
    opts.maxFails = 1;

var cwd = process.cwd();

if (typeof opts.require === 'string') {
    opts.require = [opts.require];
}

opts.require.forEach(function(module) {
    if (module) {
      /* This check ensures we ignore `-r ""`, trailing `-r`, or
       * other silly things the user might (inadvertently) be doing. */
      require(resolveModule(module, { basedir: cwd }));
    }
});

//// STATE ////////////////////////////////////////////////////////////////////

var lastTest; // reference to last test expected to run
var failedTests = 0; // number of tests so far having > 0 failed assertions

//// INSTALLATION /////////////////////////////////////////////////////////////

var tapePath;
var tape;
try {
    tapePath = "tape";
    tape = require(resolveModule(tapePath, { basedir: cwd }));
    try {
        require(resolveModule("tapeo", { basedir: cwd }));
        exitWithError(
                "tape and tapeo can't both be installed in the same module");
    }
    catch(err) {
        // desired result; ignore
    }
}
catch(err) {
    try {
        tapePath = "tapeo";
        tape = require(resolveModule(tapePath, { basedir: cwd }));
    }
    catch(err) {
        try {
            fs.statSync(resolvePath(cwd, "../bin/tapeo"));
        }
        catch(err) {
            exitWithError("can't find tape or tapeo module");
        }
        tapePath = "..";
        tape = require(tapePath); // assume testing tapeo module itself
    }
}

var haveOnStart = (typeof tape.onStart !== 'undefined');
if (haveOnStart) {
    tape.onStart(function (tests) {
        if (tests.length === 0)
            exitWithError("no tests to run");

        if (opts.selectedTest !== false) {
            if (opts.selectedTest === 0 || opts.selectedTest > tests.length)
                exitWithError("test "+ opts.selectedTest +" not found");
        }

        for (var i=0; i < tests.length; ++i) {
            lastTest = tests[i];
            lastTest.name = '['+ (i+1) +'] '+ lastTest.name;
        }

        if (opts.selectedTest !== false) {
            if (opts.selectedTest < tests.length) // must splice tail 1st
                tests.splice(opts.selectedTest);
            if (opts.selectedTest > 1)
                tests.splice(0, opts.selectedTest - 1);
            lastTest = tests[0]; // only one test kept
        }
    });
}
else if (opts.selectedTest !== false)
    exitWithError("-n is not available in the tape module");

var haveOnTest = (typeof tape.onTest !== 'undefined');
if (haveOnStart && haveOnTest) {
    tape.onTest(function (t) {
        if (t.failCount && opts.maxFails && ++failedTests === opts.maxFails &&
                t !== lastTest) {
            tape.abort("Aborted after "+ opts.maxFails +" failed test(s)");
        }
    });
}
else if (opts.maxFails)
    exitWithError("-s is not available in the tape module");

// hack to clarify that total test count is actually total "assertions"

var resultsPath = tapePath +"/lib/results.js";
var Results = require(resolveModule(resultsPath, { basedir: cwd }))
Results.prototype.close = function () {
    var self = this;
    if (self.closed) self._stream.emit('error', new Error('ALREADY CLOSED'));
    self.closed = true;
    var write = function (s) { self._stream.queue(s) };
    
    write('\n1..' + self.count + '\n');
    write('# assertions ' + self.count + '\n');
    write('# pass  ' + self.pass + '\n');
    if (self.fail) write('# fail  ' + self.fail + '\n')
    else if (self.bailout === null) write('\n# ok\n')
    
    if (self.bailout !== null) write('\nBail out! ' + self.bailout + '\n')

    self._stream.queue(null);
};

//// RUN TESTS ////////////////////////////////////////////////////////////////

opts._.forEach(function (arg) {
    glob(arg, function (err, files) {
        files.forEach(function (file) {
            require(resolvePath(cwd, file));
        });
    });
});

//// SUPPORT FUNCTIONS ////////////////////////////////////////////////////////

function exitWithError(message) {
    console.log("*** %s ***\n", message);
    process.exit(1);
}

// vim: ft=javascript
